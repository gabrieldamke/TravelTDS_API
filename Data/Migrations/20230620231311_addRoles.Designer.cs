// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230620231311_addRoles")]
    partial class addRoles
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.AtracaoTuristica", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DestinoId")
                        .HasColumnType("int");

                    b.Property<string>("ImagemBase64")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("ValorIngresso")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("DestinoId");

                    b.ToTable("AtracoesTuristicas");
                });

            modelBuilder.Entity("Domain.Entities.Destino", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("localId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("localId");

                    b.ToTable("Destinos");
                });

            modelBuilder.Entity("Domain.Entities.Hotel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Classificacao")
                        .HasColumnType("int");

                    b.Property<int?>("DestinoId")
                        .HasColumnType("int");

                    b.Property<string>("Endereco")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagemBase64")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DestinoId");

                    b.ToTable("Hoteis");
                });

            modelBuilder.Entity("Domain.Entities.Local", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Endereco")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagemLocal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pais")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Locais");
                });

            modelBuilder.Entity("Domain.Entities.ParteViagem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataFinal")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataInicial")
                        .HasColumnType("datetime2");

                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.Property<int>("IdViagem")
                        .HasColumnType("int");

                    b.Property<int?>("ViagemId")
                        .HasColumnType("int");

                    b.Property<int>("atracoesVisitadasId")
                        .HasColumnType("int");

                    b.Property<int>("restaurantesVisitadosId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.HasIndex("ViagemId");

                    b.HasIndex("atracoesVisitadasId");

                    b.HasIndex("restaurantesVisitadosId");

                    b.ToTable("PartesViagem");
                });

            modelBuilder.Entity("Domain.Entities.Restaurante", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DestinoId")
                        .HasColumnType("int");

                    b.Property<string>("ImagemBase64")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LocalId")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TipoCozinha")
                        .HasColumnType("int");

                    b.Property<float>("valorMedio")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("DestinoId");

                    b.HasIndex("LocalId")
                        .IsUnique();

                    b.ToTable("Restaurantes");
                });

            modelBuilder.Entity("Domain.Entities.TipoQuarto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("HotelId")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PrecoDiaria")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.ToTable("TipoQuarto");
                });

            modelBuilder.Entity("Domain.Entities.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagemPerfilBase64")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoPermissao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("Domain.Entities.Viagem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Viagens");
                });

            modelBuilder.Entity("Domain.Entities.AtracaoTuristica", b =>
                {
                    b.HasOne("Domain.Entities.Destino", null)
                        .WithMany("Atracoes")
                        .HasForeignKey("DestinoId");
                });

            modelBuilder.Entity("Domain.Entities.Destino", b =>
                {
                    b.HasOne("Domain.Entities.Local", "local")
                        .WithMany()
                        .HasForeignKey("localId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("local");
                });

            modelBuilder.Entity("Domain.Entities.Hotel", b =>
                {
                    b.HasOne("Domain.Entities.Destino", null)
                        .WithMany("Hoteis")
                        .HasForeignKey("DestinoId");
                });

            modelBuilder.Entity("Domain.Entities.ParteViagem", b =>
                {
                    b.HasOne("Domain.Entities.Hotel", "Hotel")
                        .WithMany()
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Viagem", null)
                        .WithMany("PartesViagem")
                        .HasForeignKey("ViagemId");

                    b.HasOne("Domain.Entities.AtracaoTuristica", "atracoesVisitadas")
                        .WithMany()
                        .HasForeignKey("atracoesVisitadasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Restaurante", "restaurantesVisitados")
                        .WithMany()
                        .HasForeignKey("restaurantesVisitadosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");

                    b.Navigation("atracoesVisitadas");

                    b.Navigation("restaurantesVisitados");
                });

            modelBuilder.Entity("Domain.Entities.Restaurante", b =>
                {
                    b.HasOne("Domain.Entities.Destino", null)
                        .WithMany("Restaurantes")
                        .HasForeignKey("DestinoId");

                    b.HasOne("Domain.Entities.Local", "Local")
                        .WithOne()
                        .HasForeignKey("Domain.Entities.Restaurante", "LocalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Local");
                });

            modelBuilder.Entity("Domain.Entities.TipoQuarto", b =>
                {
                    b.HasOne("Domain.Entities.Hotel", null)
                        .WithMany("TiposQuarto")
                        .HasForeignKey("HotelId");
                });

            modelBuilder.Entity("Domain.Entities.Viagem", b =>
                {
                    b.HasOne("Domain.Entities.Usuario", null)
                        .WithMany("Viagens")
                        .HasForeignKey("UsuarioId");
                });

            modelBuilder.Entity("Domain.Entities.Destino", b =>
                {
                    b.Navigation("Atracoes");

                    b.Navigation("Hoteis");

                    b.Navigation("Restaurantes");
                });

            modelBuilder.Entity("Domain.Entities.Hotel", b =>
                {
                    b.Navigation("TiposQuarto");
                });

            modelBuilder.Entity("Domain.Entities.Usuario", b =>
                {
                    b.Navigation("Viagens");
                });

            modelBuilder.Entity("Domain.Entities.Viagem", b =>
                {
                    b.Navigation("PartesViagem");
                });
#pragma warning restore 612, 618
        }
    }
}
